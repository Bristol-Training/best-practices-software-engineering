{"title":"Tenets of good software","markdown":{"yaml":{"title":"Tenets of good software"},"headingText":"Don't repeat yourself","containsRefs":false,"markdown":"\n\n\n\nTaking a break from learning new syntax or technical tools to think about how we can write better code. There are numerous blogs, articles and books about these topics but I wanted to pick out a few that I think are particularly worthwhile.\n\n\nOne of the first and easiest to apply is that of avoiding repetition. This is often referred to as the [DRY principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nThe most direct application of this is that of using functions. If you're ever in the situation where you are copying and pasting code, it's probably worth stopping and thinking \"should I move this into a function?\".\n\nThe advantage of the DRY principle is that by avoiding duplication **you make maintenance easier**. If you want to update, change or fix something you only need to do it in one place.\n\n## Make your code easy to use correctly and hard to use incorrectly\n\nThis is a principle that was [coined by Scott Meyers in 2004](https://doi.org/10.1109/MS.2004.29). The idea being that if you are writing code which will be used by others (functions, classes etc.) or writing user-interfaces (website, apps etc.) then you should endeavour to make the correct use of your product the \"easy path\".\n\nAs an example, let's look at a function which calculated the distance in kilometres between a given latitude/longitude pair and Bristol:\n\n\n```python\nfrom math import sin, cos, sqrt, atan2, radians\n\ndef distance_from_bristol(lon, lat):\n    \"\"\"\n    Given a longitude and latitude in degrees,\n    return the distance in km from Bristol.\n    \"\"\"\n    lon, lat = radians(lon), radians(lat)\n    bristol_lat = radians(51.4539886)\n    bristol_lon = radians(-2.6068184)\n    dlon = lon - bristol_lon\n    dlat = lat - bristol_lat\n    a = sin(dlat / 2)**2 + cos(bristol_lat) * cos(lat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6373.0 * c\n```\n\nWhen we come to use this function, we call it by passing the two values:\n\n\n```python\nlat_london = 51.5006895\nlon_london = -0.1245838\n\ndistance_from_bristol(lat_london, lon_london)\n```\n\n\n    7638.924775713775\n\n\n\nThat number is far too big! What happened?\n\nThe problem here is that the function expected the arguments to be passed in a longitude first and the latitude but we passed them the other way around. This function is *easy to use incorrectly*.\n\nTo help solve this, Python has a feature where you can specify that certain arguments *must* be passed in as named arguments. This is done by setting a literal `*` as a parameter and then all following parameters must only be passed by name:\n\n\n```python\ndef distance_from_bristol(*, lon, lat):  #  ← the only line that has changed\n    \"\"\"\n    Given a longitude and latitude in degrees,\n    return the distance in km from Bristol.\n    \"\"\"\n    lon, lat = radians(lon), radians(lat)\n    bristol_lat = radians(51.4539886)\n    bristol_lon = radians(-2.6068184)\n    dlon = lon - bristol_lon\n    dlat = lat - bristol_lat\n    a = sin(dlat / 2)**2 + cos(bristol_lat) * cos(lat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6373.0 * c\n```\n\nNow when we try to call the function without specifying which argument is which, we get an error:\n\n\n```python\ndistance_from_bristol(lat_london, lon_london)\n```\n\n\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    <ipython-input-4-343c08b29905> in <module>\n    ----> 1 distance_from_bristol(lat_london, lon_london)\n    \n\n    TypeError: distance_from_bristol() takes 0 positional arguments but 2 were given\n\n\nOnce we are explicit, it works correctly:\n\n\n```python\ndistance_from_bristol(lat=lat_london, lon=lon_london)\n```\n\n\n\n\n    172.03101346881488\n\n\n\nIt is now *harder to use incorrectly*.\n\nThere's still the issue that it's very easy to pass in the latitude and longitude in the wrong units. A potential solution to this would be to create a `Point` class which encode within it whether the units are degree or radians and require users of that class to specify then putting in values or removing them.\n\n## The Zen of Python\n\nPython has a document, called *The Zen of Python*, which describes what it considers the core principles for writing good Python code. It is available as [Python Enhancement Proposal 20](https://www.python.org/dev/peps/pep-0020/) and is also available by importing the special `this` module.\n\nIt's worth having a read through as almost all of these ideas apply to programming in general.\n\n\n```python\nimport this\n```\n\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n\n\nOf particular note are:\n\n\n**Readability counts**.\nWhen writing code, don't just think about how it will be interpreted by the computer, also consider your fellow human. Code will be read many more time than it is written so optimise for understandability.\n    \n**Errors should never pass silently**.\nThis is the logic behind Python's use of exceptions. You can't ignore an error unless you explicitly decide to. This is in contrast to common techniques in use in languages like C where a function might return a `0` if it was successful or a `1` otherwise and it would be up to the person calling the function to remember to check the value themselves.\n    \n**There should be one — and preferably only one — obvious way to do it**.\nThis goes hand-in-hand with the idea of making your code easy to use correctly and hard to use incorrectly. Provide a simple and consistent interface to your users, and don't display unnecessary complexity.\n\n\nTo explain the \"unless you're Dutch\" comment, the Zen of Python was written by Tim Peters in the early days of Python and this is intended as a friendly jab at the creator of Python [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) who is Dutch.\n\nThere's a lot of good advice in there and I recommend coming back and giving it a read every now and again. Despite it being over 20 years old, it's still completely relevant.\n\n## Testable code is better code\n\nThe one rule that I've found to be the most useful when deciding what is \"good code\" is the question \"how easy is this to test?\". If there's one thing to take away from this course, I'd say it should be this.\n\nYou will find that in the process of thinking about how to make your code more easily testable you'll make it more modular, composable and with better-defined interfaces. All of which make it cleaner, easier to understand and more maintainable.\n\nTesting therefore has the double benefit of both giving confidence that your code is correct and making the code better along the way.\n","srcMarkdownNoYaml":"\n\n\n\nTaking a break from learning new syntax or technical tools to think about how we can write better code. There are numerous blogs, articles and books about these topics but I wanted to pick out a few that I think are particularly worthwhile.\n\n## Don't repeat yourself\n\nOne of the first and easiest to apply is that of avoiding repetition. This is often referred to as the [DRY principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nThe most direct application of this is that of using functions. If you're ever in the situation where you are copying and pasting code, it's probably worth stopping and thinking \"should I move this into a function?\".\n\nThe advantage of the DRY principle is that by avoiding duplication **you make maintenance easier**. If you want to update, change or fix something you only need to do it in one place.\n\n## Make your code easy to use correctly and hard to use incorrectly\n\nThis is a principle that was [coined by Scott Meyers in 2004](https://doi.org/10.1109/MS.2004.29). The idea being that if you are writing code which will be used by others (functions, classes etc.) or writing user-interfaces (website, apps etc.) then you should endeavour to make the correct use of your product the \"easy path\".\n\nAs an example, let's look at a function which calculated the distance in kilometres between a given latitude/longitude pair and Bristol:\n\n\n```python\nfrom math import sin, cos, sqrt, atan2, radians\n\ndef distance_from_bristol(lon, lat):\n    \"\"\"\n    Given a longitude and latitude in degrees,\n    return the distance in km from Bristol.\n    \"\"\"\n    lon, lat = radians(lon), radians(lat)\n    bristol_lat = radians(51.4539886)\n    bristol_lon = radians(-2.6068184)\n    dlon = lon - bristol_lon\n    dlat = lat - bristol_lat\n    a = sin(dlat / 2)**2 + cos(bristol_lat) * cos(lat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6373.0 * c\n```\n\nWhen we come to use this function, we call it by passing the two values:\n\n\n```python\nlat_london = 51.5006895\nlon_london = -0.1245838\n\ndistance_from_bristol(lat_london, lon_london)\n```\n\n\n    7638.924775713775\n\n\n\nThat number is far too big! What happened?\n\nThe problem here is that the function expected the arguments to be passed in a longitude first and the latitude but we passed them the other way around. This function is *easy to use incorrectly*.\n\nTo help solve this, Python has a feature where you can specify that certain arguments *must* be passed in as named arguments. This is done by setting a literal `*` as a parameter and then all following parameters must only be passed by name:\n\n\n```python\ndef distance_from_bristol(*, lon, lat):  #  ← the only line that has changed\n    \"\"\"\n    Given a longitude and latitude in degrees,\n    return the distance in km from Bristol.\n    \"\"\"\n    lon, lat = radians(lon), radians(lat)\n    bristol_lat = radians(51.4539886)\n    bristol_lon = radians(-2.6068184)\n    dlon = lon - bristol_lon\n    dlat = lat - bristol_lat\n    a = sin(dlat / 2)**2 + cos(bristol_lat) * cos(lat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6373.0 * c\n```\n\nNow when we try to call the function without specifying which argument is which, we get an error:\n\n\n```python\ndistance_from_bristol(lat_london, lon_london)\n```\n\n\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    <ipython-input-4-343c08b29905> in <module>\n    ----> 1 distance_from_bristol(lat_london, lon_london)\n    \n\n    TypeError: distance_from_bristol() takes 0 positional arguments but 2 were given\n\n\nOnce we are explicit, it works correctly:\n\n\n```python\ndistance_from_bristol(lat=lat_london, lon=lon_london)\n```\n\n\n\n\n    172.03101346881488\n\n\n\nIt is now *harder to use incorrectly*.\n\nThere's still the issue that it's very easy to pass in the latitude and longitude in the wrong units. A potential solution to this would be to create a `Point` class which encode within it whether the units are degree or radians and require users of that class to specify then putting in values or removing them.\n\n## The Zen of Python\n\nPython has a document, called *The Zen of Python*, which describes what it considers the core principles for writing good Python code. It is available as [Python Enhancement Proposal 20](https://www.python.org/dev/peps/pep-0020/) and is also available by importing the special `this` module.\n\nIt's worth having a read through as almost all of these ideas apply to programming in general.\n\n\n```python\nimport this\n```\n\n    The Zen of Python, by Tim Peters\n    \n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n\n\nOf particular note are:\n\n\n**Readability counts**.\nWhen writing code, don't just think about how it will be interpreted by the computer, also consider your fellow human. Code will be read many more time than it is written so optimise for understandability.\n    \n**Errors should never pass silently**.\nThis is the logic behind Python's use of exceptions. You can't ignore an error unless you explicitly decide to. This is in contrast to common techniques in use in languages like C where a function might return a `0` if it was successful or a `1` otherwise and it would be up to the person calling the function to remember to check the value themselves.\n    \n**There should be one — and preferably only one — obvious way to do it**.\nThis goes hand-in-hand with the idea of making your code easy to use correctly and hard to use incorrectly. Provide a simple and consistent interface to your users, and don't display unnecessary complexity.\n\n\nTo explain the \"unless you're Dutch\" comment, the Zen of Python was written by Tim Peters in the early days of Python and this is intended as a friendly jab at the creator of Python [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) who is Dutch.\n\nThere's a lot of good advice in there and I recommend coming back and giving it a read every now and again. Despite it being over 20 years old, it's still completely relevant.\n\n## Testable code is better code\n\nThe one rule that I've found to be the most useful when deciding what is \"good code\" is the question \"how easy is this to test?\". If there's one thing to take away from this course, I'd say it should be this.\n\nYou will find that in the process of thinking about how to make your code more easily testable you'll make it more modular, composable and with better-defined interfaces. All of which make it cleaner, easier to understand and more maintainable.\n\nTesting therefore has the double benefit of both giving confidence that your code is correct and making the code better along the way.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"shift-heading-level-by":1,"highlight-style":"github","output-file":"010-good-software-principles.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":["cosmo","../styles.scss"],"title":"Tenets of good software"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}