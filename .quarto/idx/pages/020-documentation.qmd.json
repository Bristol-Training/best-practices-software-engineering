{"title":"Documentation","markdown":{"yaml":{"title":"Documentation"},"headingText":"Documenting our own functions","containsRefs":false,"markdown":"\n\n\nIn previous sessions you have learned how to package code into functions and to package functions into modules. Functions and modules let you design, write and package your code so that it is easy to understand and easily reusable. However, to share the code, and allow users to really understand how it works, you need to add documentation.\n\nYou can access the documentation for any object using the Python `help` function or using `?` in the interactive Python console. For example, lets look at the documentation for the `print` function that we have used many times. Go to the Console and run:\n\n\n```python\nprint?\n```\n\nit should return something that looks like:\n\n```\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n```\n\nThis *docstring* as it calls it (for documentation string) is a human-written piece of text which is there to help you, the programmer, know how to use the function.\n\nThe `?` syntax is an *iPython*-specific thing but you can use the equivalent `help` function anywhere. If you run:\n\n\n```python\nhelp(print)\n```\n\n    Help on built-in function print in module builtins:\n    \n    print(...)\n        print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n        \n        Prints the values to a stream, or to sys.stdout by default.\n        Optional keyword arguments:\n        file:  a file-like object (stream); defaults to the current sys.stdout.\n        sep:   string inserted between values, default a space.\n        end:   string appended after the last value, default a newline.\n        flush: whether to forcibly flush the stream.\n    \n\n\nthen you should see a very similar output.\n\nThroughout this chapter we will be learning how to make our own docstrings and how to create nice readable documentation web pages.\n\n\nLet's start by writing a simple function in a module by itself which we can import and use. To begin we'll explore this in the Python Console and then we'll move onto putting this code into a module. For this example we'll use the `add_arrays` function from previous courses. Type the following into the Python Console:\n\n\n```python\ndef add_arrays(x, y):\n    z = []\n    for x_elem, y_elem in zip(x, y):\n        z.append(x_elem + y_elem)\n    return z\n```\n\nTo see what the documentation for this function is, we either type `add_arrays?` or:\n\n\n```python\nhelp(add_arrays)\n```\n\n    Help on function add_arrays in module __main__:\n    \n    add_arrays(x, y)\n    \n\n\nBy default, the only documentation available for a function is just a repeat of whatever we wrote on the `def` line, so we see the name of the function along with the parameters available for it.\n\nIf we want to give the user some more information, we can pass it is by putting a string as the first thing inside the function. By convention we use a triple-quoted string which both starts and ends with three `\"` in a row as they allow you to have strings over multiple lines:\n\n\n```python\ndef add_arrays(x, y):\n    \"\"\"\n    This function adds together each element of the two\n    passed lists, returning the result in the returned list.\n    \"\"\"\n    z = []\n    for x_elem, y_elem in zip(x, y):\n        z.append(x_elem + y_elem)\n    return z\n```\n\nNow, when we ask for the documentation, we should see our docstring printed:\n\n\n```python\nhelp(add_arrays)\n```\n\n    Help on function add_arrays in module __main__:\n    \n    add_arrays(x, y)\n        This function adds together each element of the two\n        passed lists, returning the result in the returned list.\n    \n\n\nYou can write whatever text you like in the documentation string, the most important thing is that you give the users of your code the information they need. Useful information for a user of the function are things like:\n\n - What arguments it takes\n - What it returns\n - An example of how to use it\n\nThere are a number of different conventions of how to format documentation strings but a common one is the Google style which looks like:\n\n\n```python\ndef add_arrays(x, y):\n    \"\"\"\n    This function adds together each element of the two passed lists.\n\n    Args:\n        x (list): The first list to add\n        y (list): The second list to add\n\n    Returns:\n        list: the pairwise sums of ``x`` and ``y``.\n\n    Examples:\n        >>> add_arrays([1, 4, 5], [4, 3, 5])\n        [5, 7, 10]\n    \"\"\"\n    z = []\n    for x_, y_ in zip(x, y):\n        z.append(x_ + y_)\n\n    return z\n```\n\nWe can check that this works by again doing:\n\n\n```python\nhelp(add_arrays)\n```\n\n    Help on function add_arrays in module __main__:\n    \n    add_arrays(x, y)\n        This function adds together each element of the two passed lists.\n        \n        Args:\n            x (list): The first list to add\n            y (list): The second list to add\n        \n        Returns:\n            list: the pairwise sums of ``x`` and ``y``.\n        \n        Examples:\n            >>> add_arrays([1, 4, 5], [4, 3, 5])\n            [5, 7, 10]\n    \n\n\nThis is a lot more information and it might seem strange that the documentation is longer than the code it describes but it's very important that you give the user of your code all the information that they need in order to use it. Remember, your documentation is only going to be written once but it will be read many times so it's worth spending the time on it.\n\nIn this example we have given a short one-line description of what the function does. Then  we explicitly listed all of the arguments to the function along with what type they expect. After that we specified the type and description of the return value. Finally, and importantly we give an example to the user of how the function can be called and the output that it will give. The `>>>` go in front of the line of calling Python code and the return value is on the line after.\n\nYou can find more examples of the Google documentation style in the [official Sphinx documentation](https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html).\n\n## Documenting modules\n\nAs well as functions, we can document whole modules. To do this, we'll have to move our function into a file called `arrays.py`. From previous courses, you should remember that this will make a module called `arrays` which we can import.\n\nTo document a module you use the same triple-quoted string as in functions but this time it goes at the very top of the file.\n\nIn the file editor, make a file called `arrays.py` in the `bestpractices` folder and put the following in it:\n\n\n```python\n\"\"\"\nThis module contains functions for manipulating and combining Python lists.\n\"\"\"\n\ndef add_arrays(x, y):\n    \"\"\"\n    This function adds together each element of the two passed lists.\n\n    Args:\n        x (list): The first list to add\n        y (list): The second list to add\n\n    Returns:\n        list: the pairwise sums of ``x`` and ``y``.\n\n    Examples:\n        >>> add_arrays([1, 4, 5], [4, 3, 5])\n        [5, 7, 10]\n    \"\"\"\n    z = []\n    for x_, y_ in zip(x, y):\n        z.append(x_ + y_)\n\n    return z\n```\n\n\nWe can then import the module in the Python Console:\n\n\n```python\nimport arrays\n```\n\nIf you get an import error, the Console may be looking in the wrong folder. Move to the correct folder using `% cd bestpractices`.\n\nOnce it is imported we can get the documentation for the function with:\n\n\n```python\nhelp(arrays.add_arrays)\n```\n\n    Help on function add_arrays in module arrays:\n    \n    add_arrays(x, y)\n        This function adds together each element of the two passed lists.\n        \n        Args:\n            x (list): The first list to add\n            y (list): The second list to add\n        \n        Returns:\n            list: the pairwise sums of ``x`` and ``y``.\n        \n        Examples:\n            >>> add_arrays([1, 4, 5], [4, 3, 5])\n            [5, 7, 10]\n    \n\n\nBut we can also get the documentation for the whole module with:\n\n\n```python\nhelp(arrays)\n```\n\n    Help on module arrays:\n    \n    NAME\n        arrays - This module contains functions for manipulating and combining Python lists.\n    \n    FUNCTIONS\n        add_arrays(x, y)\n            This function adds together each element of the two passed lists.\n            \n            Args:\n                x (list): The first list to add\n                y (list): The second list to add\n            \n            Returns:\n                list: the pairwise sums of ``x`` and ``y``.\n            \n            Examples:\n                >>> add_arrays([1, 4, 5], [4, 3, 5])\n                [5, 7, 10]\n    \n    FILE\n        /home/matt/projects/courses/software_engineering_best_practices/arrays.py\n    \n    \n\n\nYou'll see in this case that it's showing the overall module docstring as well as those for the functions inside it.\n\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\nRun the example code from the documentation in the Console. Make sure that you are seeing the same output as shown in the docs.\n- hint: remember that the `add_arrays` function is inside the `arrays` module so you either have to import it as `from arrays import add_arrays` or run it with `arrays.add_arrays`.\n:::\n\n\n\n\n## Documentation-driven-development\n\nIt's always worth writing some documentation for each of your functions but you can go a step further and use a method known as *documentation-driven-development*. In this model you write the function signature and documentation for the function first, before writing any of the code inside it. This encourages you to think ahead of time about exactly what your function will do, how it will be called by users and what you expect it to return.\n\n## Generating documentation web pages\n\nAs well as viewing your documentation in the Python Console, it's possible to automatically create web pages to share your documentation. This is not a necessary part of this course but if you are interested later, have a look at the [appendix on the tool Sphinx](./appendix_sphinx.md).\n","srcMarkdownNoYaml":"\n\n\nIn previous sessions you have learned how to package code into functions and to package functions into modules. Functions and modules let you design, write and package your code so that it is easy to understand and easily reusable. However, to share the code, and allow users to really understand how it works, you need to add documentation.\n\nYou can access the documentation for any object using the Python `help` function or using `?` in the interactive Python console. For example, lets look at the documentation for the `print` function that we have used many times. Go to the Console and run:\n\n\n```python\nprint?\n```\n\nit should return something that looks like:\n\n```\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n```\n\nThis *docstring* as it calls it (for documentation string) is a human-written piece of text which is there to help you, the programmer, know how to use the function.\n\nThe `?` syntax is an *iPython*-specific thing but you can use the equivalent `help` function anywhere. If you run:\n\n\n```python\nhelp(print)\n```\n\n    Help on built-in function print in module builtins:\n    \n    print(...)\n        print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n        \n        Prints the values to a stream, or to sys.stdout by default.\n        Optional keyword arguments:\n        file:  a file-like object (stream); defaults to the current sys.stdout.\n        sep:   string inserted between values, default a space.\n        end:   string appended after the last value, default a newline.\n        flush: whether to forcibly flush the stream.\n    \n\n\nthen you should see a very similar output.\n\nThroughout this chapter we will be learning how to make our own docstrings and how to create nice readable documentation web pages.\n\n## Documenting our own functions\n\nLet's start by writing a simple function in a module by itself which we can import and use. To begin we'll explore this in the Python Console and then we'll move onto putting this code into a module. For this example we'll use the `add_arrays` function from previous courses. Type the following into the Python Console:\n\n\n```python\ndef add_arrays(x, y):\n    z = []\n    for x_elem, y_elem in zip(x, y):\n        z.append(x_elem + y_elem)\n    return z\n```\n\nTo see what the documentation for this function is, we either type `add_arrays?` or:\n\n\n```python\nhelp(add_arrays)\n```\n\n    Help on function add_arrays in module __main__:\n    \n    add_arrays(x, y)\n    \n\n\nBy default, the only documentation available for a function is just a repeat of whatever we wrote on the `def` line, so we see the name of the function along with the parameters available for it.\n\nIf we want to give the user some more information, we can pass it is by putting a string as the first thing inside the function. By convention we use a triple-quoted string which both starts and ends with three `\"` in a row as they allow you to have strings over multiple lines:\n\n\n```python\ndef add_arrays(x, y):\n    \"\"\"\n    This function adds together each element of the two\n    passed lists, returning the result in the returned list.\n    \"\"\"\n    z = []\n    for x_elem, y_elem in zip(x, y):\n        z.append(x_elem + y_elem)\n    return z\n```\n\nNow, when we ask for the documentation, we should see our docstring printed:\n\n\n```python\nhelp(add_arrays)\n```\n\n    Help on function add_arrays in module __main__:\n    \n    add_arrays(x, y)\n        This function adds together each element of the two\n        passed lists, returning the result in the returned list.\n    \n\n\nYou can write whatever text you like in the documentation string, the most important thing is that you give the users of your code the information they need. Useful information for a user of the function are things like:\n\n - What arguments it takes\n - What it returns\n - An example of how to use it\n\nThere are a number of different conventions of how to format documentation strings but a common one is the Google style which looks like:\n\n\n```python\ndef add_arrays(x, y):\n    \"\"\"\n    This function adds together each element of the two passed lists.\n\n    Args:\n        x (list): The first list to add\n        y (list): The second list to add\n\n    Returns:\n        list: the pairwise sums of ``x`` and ``y``.\n\n    Examples:\n        >>> add_arrays([1, 4, 5], [4, 3, 5])\n        [5, 7, 10]\n    \"\"\"\n    z = []\n    for x_, y_ in zip(x, y):\n        z.append(x_ + y_)\n\n    return z\n```\n\nWe can check that this works by again doing:\n\n\n```python\nhelp(add_arrays)\n```\n\n    Help on function add_arrays in module __main__:\n    \n    add_arrays(x, y)\n        This function adds together each element of the two passed lists.\n        \n        Args:\n            x (list): The first list to add\n            y (list): The second list to add\n        \n        Returns:\n            list: the pairwise sums of ``x`` and ``y``.\n        \n        Examples:\n            >>> add_arrays([1, 4, 5], [4, 3, 5])\n            [5, 7, 10]\n    \n\n\nThis is a lot more information and it might seem strange that the documentation is longer than the code it describes but it's very important that you give the user of your code all the information that they need in order to use it. Remember, your documentation is only going to be written once but it will be read many times so it's worth spending the time on it.\n\nIn this example we have given a short one-line description of what the function does. Then  we explicitly listed all of the arguments to the function along with what type they expect. After that we specified the type and description of the return value. Finally, and importantly we give an example to the user of how the function can be called and the output that it will give. The `>>>` go in front of the line of calling Python code and the return value is on the line after.\n\nYou can find more examples of the Google documentation style in the [official Sphinx documentation](https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html).\n\n## Documenting modules\n\nAs well as functions, we can document whole modules. To do this, we'll have to move our function into a file called `arrays.py`. From previous courses, you should remember that this will make a module called `arrays` which we can import.\n\nTo document a module you use the same triple-quoted string as in functions but this time it goes at the very top of the file.\n\nIn the file editor, make a file called `arrays.py` in the `bestpractices` folder and put the following in it:\n\n\n```python\n\"\"\"\nThis module contains functions for manipulating and combining Python lists.\n\"\"\"\n\ndef add_arrays(x, y):\n    \"\"\"\n    This function adds together each element of the two passed lists.\n\n    Args:\n        x (list): The first list to add\n        y (list): The second list to add\n\n    Returns:\n        list: the pairwise sums of ``x`` and ``y``.\n\n    Examples:\n        >>> add_arrays([1, 4, 5], [4, 3, 5])\n        [5, 7, 10]\n    \"\"\"\n    z = []\n    for x_, y_ in zip(x, y):\n        z.append(x_ + y_)\n\n    return z\n```\n\n\nWe can then import the module in the Python Console:\n\n\n```python\nimport arrays\n```\n\nIf you get an import error, the Console may be looking in the wrong folder. Move to the correct folder using `% cd bestpractices`.\n\nOnce it is imported we can get the documentation for the function with:\n\n\n```python\nhelp(arrays.add_arrays)\n```\n\n    Help on function add_arrays in module arrays:\n    \n    add_arrays(x, y)\n        This function adds together each element of the two passed lists.\n        \n        Args:\n            x (list): The first list to add\n            y (list): The second list to add\n        \n        Returns:\n            list: the pairwise sums of ``x`` and ``y``.\n        \n        Examples:\n            >>> add_arrays([1, 4, 5], [4, 3, 5])\n            [5, 7, 10]\n    \n\n\nBut we can also get the documentation for the whole module with:\n\n\n```python\nhelp(arrays)\n```\n\n    Help on module arrays:\n    \n    NAME\n        arrays - This module contains functions for manipulating and combining Python lists.\n    \n    FUNCTIONS\n        add_arrays(x, y)\n            This function adds together each element of the two passed lists.\n            \n            Args:\n                x (list): The first list to add\n                y (list): The second list to add\n            \n            Returns:\n                list: the pairwise sums of ``x`` and ``y``.\n            \n            Examples:\n                >>> add_arrays([1, 4, 5], [4, 3, 5])\n                [5, 7, 10]\n    \n    FILE\n        /home/matt/projects/courses/software_engineering_best_practices/arrays.py\n    \n    \n\n\nYou'll see in this case that it's showing the overall module docstring as well as those for the functions inside it.\n\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\nRun the example code from the documentation in the Console. Make sure that you are seeing the same output as shown in the docs.\n- hint: remember that the `add_arrays` function is inside the `arrays` module so you either have to import it as `from arrays import add_arrays` or run it with `arrays.add_arrays`.\n:::\n\n\n\n\n## Documentation-driven-development\n\nIt's always worth writing some documentation for each of your functions but you can go a step further and use a method known as *documentation-driven-development*. In this model you write the function signature and documentation for the function first, before writing any of the code inside it. This encourages you to think ahead of time about exactly what your function will do, how it will be called by users and what you expect it to return.\n\n## Generating documentation web pages\n\nAs well as viewing your documentation in the Python Console, it's possible to automatically create web pages to share your documentation. This is not a necessary part of this course but if you are interested later, have a look at the [appendix on the tool Sphinx](./appendix_sphinx.md).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"shift-heading-level-by":1,"highlight-style":"github","output-file":"020-documentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":["cosmo","../styles.scss"],"title":"Documentation"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}