{"title":"Worksheet","markdown":{"yaml":{"title":"Worksheet","jupyter":"python3"},"headingText":"A lookup dictionary which, given a letter will return the morse code equivalent","containsRefs":false,"markdown":"\n\n\nThis page contains a number of questions and exercises to give you a chance to practise what you have learned this session.\nYou should create a new `.py` Python file for each exercise.\n\n\n\nWe've now covered all the topics on this course so to finish off, work through this final exercise. It is designed to give you a chance to pratise what you've learned on some new code.\n\nMake a new directory alongside the `bestpractices` folder called `crypto`. In the Terminal change to that directory with `cd ../crypto` and in the Python Console change there with `%cd ../crypto`. In that directory make two new files called `morse.py` and `test_morse.py`:\n\n\n```python\n_letter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',\n                   ' ':'/'}\n\n# This will create a dictionary that can go from the morse back to the letter\n_morse_to_letter = {}\nfor letter in _letter_to_morse:\n    morse = _letter_to_morse[letter]\n    _morse_to_letter[morse] = letter\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse.append(_letter_to_morse[letter])\n\n    # We need to join together Morse code letters with spaces\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english.append(_morse_to_letter[letter])\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n```\n\n    Overwriting morse.py\n\n\n\n```python\nfrom morse import encode, decode\n\ndef test_encode():\n    assert encode(\"SOS\") == \"... --- ...\"\n```\n\n\n\nThis module is designed to convert message to and from [Morse code](https://en.wikipedia.org/wiki/Morse_code). It provides one function which takes an English message and converts it to a Morse code string, separated by spaces and another function which takes the Morse code string and converts it to English.\n\n::: {#example1 .callout-note icon=false title='Exercise'}\nAdd documentation to the `morse` module and to the `encode` and `decode` functions. Make sure you detail the inputs, outputs and give an example of their usage. Look at the tests to get an idea of how it works or try importing `morse` in the Python Console and have a play with the functions to understand them.\n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_morse_doc.qmd >}}\n:::\n\n::: {#example2 .callout-note icon=false title='Exercise'}\n\n- Add a test for the `decode` function to `test_morse.py` and check it passes with `pytest`\n- Parametrise both tests to give several examples. Make sure you include upper and lower case letters as well as checking what happens if you pass in empty strings\n- Make sure to use `--doctest-modules` to run the documentation examples that you added in the last exercise\n- Hint: When writing doctests, it cares whether your test output uses single or double quotes (`'` or `\"`). Use single quotes for doctest outputs.\n\n:::\n\n::: {#answer2 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_morse_test.qmd >}}\n:::\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n- What happens if you pass in the string `\"Don't forget to save us\"` to `encode`?\n  - Hint: The problem is caused by the `'` in the string\n- Edit `morse.py` to raise a `ValueError` in this situation instead.\n- Write a test to make sure that the `ValueError` is raised when a string with a `'` is passed in.\n- Parametrise that test with some other examples including the `&` and `Â£` characters.\n:::\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_morse_error.qmd >}}\n:::\n\nopen(./assets)\n\n<!--\n\n## Another cypher\n\nLet's add another text cypher to our `crypto` package. This time we will implement the [Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher) or [ROT13](https://en.wikipedia.org/wiki/ROT13). Once more the module will provide `encode` and `decode` functions:\n\n\n```python\n%%writefile rot13.py\n\nimport string\n\n_lower_cipher = string.ascii_lowercase[13:] + string.ascii_lowercase[:13]\n_upper_cipher = string.ascii_uppercase[13:] + string.ascii_uppercase[:13]\n\ndef encode(message):\n    output = []\n    for letter in message:\n        if letter in string.ascii_lowercase:\n            i = string.ascii_lowercase.find(letter)\n            output.append(_lower_cipher[i])\n        elif letter in string.ascii_uppercase:\n            i = string.ascii_uppercase.find(letter)\n            output.append(_upper_cipher[i])\n    \n    return \"\".join(output)\n\n\ndef decode(message):\n    output = []\n    for letter in message:\n        if letter in _lower_cipher:\n            i = _lower_cipher.find(letter)\n            output.append(string.ascii_uppercase[i])\n        elif letter in _upper_cipher:\n            i = _upper_cipher.find(letter)\n            output.append(string.ascii_uppercase[i])\n    \n    return \"\".join(output)\n```\n\n    Overwriting rot13.py\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n:::\n\n- Add documentation for the `rot13` module.\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_rot13_doc.qmd >}}\n:::\n\nThis time the tests are provided for you. Copy this into a new file called `test_rot13.py`:\n\n\n```python\n%%writefile test_rot13.py\n\nimport pytest\n\nfrom rot13 import encode, decode\n\n@pytest.mark.parametrize(\"message, expected\", [\n    (\"SECRET\", \"FRPERG\"),\n    (\"secret\", \"frperg\"),\n])\ndef test_encode(message, expected):\n    assert encode(message) == expected\n\n@pytest.mark.parametrize(\"message, expected\", [\n    (\"FRPERG\", \"SECRET\"),\n    (\"frperg\", \"secret\"),\n])\ndef test_decode(message, expected):\n    assert decode(message) == expected\n\ndef test_encode_spaces_error():\n    with pytest.raises(ValueError):\n        encode(\"Secret message for you\")\n```\n\n    Overwriting test_rot13.py\n\n\nWhen we run these tests with `pytest` we see that there are some passes and some failures:\n\n\n```python\npytest -v test_rot13.py\n```\n\n    \u001b[1m=================== test session starts ====================\u001b[0m\n    platform linux -- Python 3.8.5, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3\n    cachedir: .pytest_cache\n    rootdir: /home/matt/projects/courses/software_engineering_best_practices\n    plugins: requests-mock-1.8.0\n    collected 5 items                                          \u001b[0m\n    \n    test_rot13.py::test_encode[SECRET-FRPERG] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 20%]\u001b[0m\n    test_rot13.py::test_encode[secret-frperg] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 40%]\u001b[0m\n    test_rot13.py::test_decode[FRPERG-SECRET] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 60%]\u001b[0m\n    test_rot13.py::test_decode[frperg-secret] \u001b[31mFAILED\u001b[0m\u001b[31m     [ 80%]\u001b[0m\n    test_rot13.py::test_encode_spaces_error \u001b[31mFAILED\u001b[0m\u001b[31m       [100%]\u001b[0m\n    \n    ========================= FAILURES =========================\n    \u001b[31m\u001b[1m________________ test_decode[frperg-secret] ________________\u001b[0m\n    \n    message = 'frperg', expected = 'secret'\n    \n        \u001b[37m@pytest\u001b[39;49;00m.mark.parametrize(\u001b[33m\"\u001b[39;49;00m\u001b[33mmessage, expected\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, [\n            (\u001b[33m\"\u001b[39;49;00m\u001b[33mFRPERG\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, \u001b[33m\"\u001b[39;49;00m\u001b[33mSECRET\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m),\n            (\u001b[33m\"\u001b[39;49;00m\u001b[33mfrperg\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, \u001b[33m\"\u001b[39;49;00m\u001b[33msecret\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m),\n        ])\n        \u001b[94mdef\u001b[39;49;00m \u001b[92mtest_decode\u001b[39;49;00m(message, expected):\n    >       \u001b[94massert\u001b[39;49;00m decode(message) == expected\n    \u001b[1m\u001b[31mE       AssertionError: assert 'SECRET' == 'secret'\u001b[0m\n    \u001b[1m\u001b[31mE         - secret\u001b[0m\n    \u001b[1m\u001b[31mE         + SECRET\u001b[0m\n    \n    \u001b[1m\u001b[31mtest_rot13.py\u001b[0m:18: AssertionError\n    \u001b[31m\u001b[1m_________________ test_encode_spaces_error _________________\u001b[0m\n    \n        \u001b[94mdef\u001b[39;49;00m \u001b[92mtest_encode_spaces_error\u001b[39;49;00m():\n            \u001b[94mwith\u001b[39;49;00m pytest.raises(\u001b[96mValueError\u001b[39;49;00m):\n    >           encode(\u001b[33m\"\u001b[39;49;00m\u001b[33mSecret message for you\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m)\n    \u001b[1m\u001b[31mE           Failed: DID NOT RAISE <class 'ValueError'>\u001b[0m\n    \n    \u001b[1m\u001b[31mtest_rot13.py\u001b[0m:22: Failed\n    ================= short test summary info ==================\n    FAILED test_rot13.py::test_decode[frperg-secret] - Assert...\n    FAILED test_rot13.py::test_encode_spaces_error - Failed: ...\n    \u001b[31m=============== \u001b[31m\u001b[1m2 failed\u001b[0m, \u001b[32m3 passed\u001b[0m\u001b[31m in 0.10s\u001b[0m\u001b[31m ================\u001b[0m\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n:::\n\nThere are two failing tests:\n\n1. `test_rot13.py::test_decode[frperg-secret]` is failing due to a bug in the code. Find the bug in `rot13.py` and fix it so that the test passes.\n2. `test_rot13.py::test_encode_spaces_error` is failing due to a missing feature in our code. At the moment any spaces in the string are ignored. Change `encode` and `decode` in `rot13.py` so that they raise an error if any letter in the message is not found in the lookup string.\n  - Hint: You should add an `else` to the `if`/`elif` blocks\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_rot13_fix.qmd >}}\n:::\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n:::\n\n- Add a test to both `test_morse.py` and `test_rot13.py` which checks for \"round-tripping\". That is, check that a valid message which is passed to `encode` and then the output of that is passed to `decode` gets you back the original message.\n- What types of messages do not round-trip correctly in `morse`? What could you do to the test to make it pass?\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_rot13_roundtrip.qmd >}}\n:::\n\n\n-->","srcMarkdownNoYaml":"\n\n\nThis page contains a number of questions and exercises to give you a chance to practise what you have learned this session.\nYou should create a new `.py` Python file for each exercise.\n\n\n\nWe've now covered all the topics on this course so to finish off, work through this final exercise. It is designed to give you a chance to pratise what you've learned on some new code.\n\nMake a new directory alongside the `bestpractices` folder called `crypto`. In the Terminal change to that directory with `cd ../crypto` and in the Python Console change there with `%cd ../crypto`. In that directory make two new files called `morse.py` and `test_morse.py`:\n\n\n```python\n# A lookup dictionary which, given a letter will return the morse code equivalent\n_letter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',\n                   ' ':'/'}\n\n# This will create a dictionary that can go from the morse back to the letter\n_morse_to_letter = {}\nfor letter in _letter_to_morse:\n    morse = _letter_to_morse[letter]\n    _morse_to_letter[morse] = letter\n\n\ndef encode(message):\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        morse.append(_letter_to_morse[letter])\n\n    # We need to join together Morse code letters with spaces\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\ndef decode(message):\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english.append(_morse_to_letter[letter])\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n```\n\n    Overwriting morse.py\n\n\n\n```python\nfrom morse import encode, decode\n\ndef test_encode():\n    assert encode(\"SOS\") == \"... --- ...\"\n```\n\n\n\nThis module is designed to convert message to and from [Morse code](https://en.wikipedia.org/wiki/Morse_code). It provides one function which takes an English message and converts it to a Morse code string, separated by spaces and another function which takes the Morse code string and converts it to English.\n\n::: {#example1 .callout-note icon=false title='Exercise'}\nAdd documentation to the `morse` module and to the `encode` and `decode` functions. Make sure you detail the inputs, outputs and give an example of their usage. Look at the tests to get an idea of how it works or try importing `morse` in the Python Console and have a play with the functions to understand them.\n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_morse_doc.qmd >}}\n:::\n\n::: {#example2 .callout-note icon=false title='Exercise'}\n\n- Add a test for the `decode` function to `test_morse.py` and check it passes with `pytest`\n- Parametrise both tests to give several examples. Make sure you include upper and lower case letters as well as checking what happens if you pass in empty strings\n- Make sure to use `--doctest-modules` to run the documentation examples that you added in the last exercise\n- Hint: When writing doctests, it cares whether your test output uses single or double quotes (`'` or `\"`). Use single quotes for doctest outputs.\n\n:::\n\n::: {#answer2 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_morse_test.qmd >}}\n:::\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n- What happens if you pass in the string `\"Don't forget to save us\"` to `encode`?\n  - Hint: The problem is caused by the `'` in the string\n- Edit `morse.py` to raise a `ValueError` in this situation instead.\n- Write a test to make sure that the `ValueError` is raised when a string with a `'` is passed in.\n- Parametrise that test with some other examples including the `&` and `Â£` characters.\n:::\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_morse_error.qmd >}}\n:::\n\nopen(./assets)\n\n<!--\n\n## Another cypher\n\nLet's add another text cypher to our `crypto` package. This time we will implement the [Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher) or [ROT13](https://en.wikipedia.org/wiki/ROT13). Once more the module will provide `encode` and `decode` functions:\n\n\n```python\n%%writefile rot13.py\n\nimport string\n\n_lower_cipher = string.ascii_lowercase[13:] + string.ascii_lowercase[:13]\n_upper_cipher = string.ascii_uppercase[13:] + string.ascii_uppercase[:13]\n\ndef encode(message):\n    output = []\n    for letter in message:\n        if letter in string.ascii_lowercase:\n            i = string.ascii_lowercase.find(letter)\n            output.append(_lower_cipher[i])\n        elif letter in string.ascii_uppercase:\n            i = string.ascii_uppercase.find(letter)\n            output.append(_upper_cipher[i])\n    \n    return \"\".join(output)\n\n\ndef decode(message):\n    output = []\n    for letter in message:\n        if letter in _lower_cipher:\n            i = _lower_cipher.find(letter)\n            output.append(string.ascii_uppercase[i])\n        elif letter in _upper_cipher:\n            i = _upper_cipher.find(letter)\n            output.append(string.ascii_uppercase[i])\n    \n    return \"\".join(output)\n```\n\n    Overwriting rot13.py\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n:::\n\n- Add documentation for the `rot13` module.\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_rot13_doc.qmd >}}\n:::\n\nThis time the tests are provided for you. Copy this into a new file called `test_rot13.py`:\n\n\n```python\n%%writefile test_rot13.py\n\nimport pytest\n\nfrom rot13 import encode, decode\n\n@pytest.mark.parametrize(\"message, expected\", [\n    (\"SECRET\", \"FRPERG\"),\n    (\"secret\", \"frperg\"),\n])\ndef test_encode(message, expected):\n    assert encode(message) == expected\n\n@pytest.mark.parametrize(\"message, expected\", [\n    (\"FRPERG\", \"SECRET\"),\n    (\"frperg\", \"secret\"),\n])\ndef test_decode(message, expected):\n    assert decode(message) == expected\n\ndef test_encode_spaces_error():\n    with pytest.raises(ValueError):\n        encode(\"Secret message for you\")\n```\n\n    Overwriting test_rot13.py\n\n\nWhen we run these tests with `pytest` we see that there are some passes and some failures:\n\n\n```python\npytest -v test_rot13.py\n```\n\n    \u001b[1m=================== test session starts ====================\u001b[0m\n    platform linux -- Python 3.8.5, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3\n    cachedir: .pytest_cache\n    rootdir: /home/matt/projects/courses/software_engineering_best_practices\n    plugins: requests-mock-1.8.0\n    collected 5 items                                          \u001b[0m\n    \n    test_rot13.py::test_encode[SECRET-FRPERG] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 20%]\u001b[0m\n    test_rot13.py::test_encode[secret-frperg] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 40%]\u001b[0m\n    test_rot13.py::test_decode[FRPERG-SECRET] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 60%]\u001b[0m\n    test_rot13.py::test_decode[frperg-secret] \u001b[31mFAILED\u001b[0m\u001b[31m     [ 80%]\u001b[0m\n    test_rot13.py::test_encode_spaces_error \u001b[31mFAILED\u001b[0m\u001b[31m       [100%]\u001b[0m\n    \n    ========================= FAILURES =========================\n    \u001b[31m\u001b[1m________________ test_decode[frperg-secret] ________________\u001b[0m\n    \n    message = 'frperg', expected = 'secret'\n    \n        \u001b[37m@pytest\u001b[39;49;00m.mark.parametrize(\u001b[33m\"\u001b[39;49;00m\u001b[33mmessage, expected\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, [\n            (\u001b[33m\"\u001b[39;49;00m\u001b[33mFRPERG\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, \u001b[33m\"\u001b[39;49;00m\u001b[33mSECRET\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m),\n            (\u001b[33m\"\u001b[39;49;00m\u001b[33mfrperg\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, \u001b[33m\"\u001b[39;49;00m\u001b[33msecret\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m),\n        ])\n        \u001b[94mdef\u001b[39;49;00m \u001b[92mtest_decode\u001b[39;49;00m(message, expected):\n    >       \u001b[94massert\u001b[39;49;00m decode(message) == expected\n    \u001b[1m\u001b[31mE       AssertionError: assert 'SECRET' == 'secret'\u001b[0m\n    \u001b[1m\u001b[31mE         - secret\u001b[0m\n    \u001b[1m\u001b[31mE         + SECRET\u001b[0m\n    \n    \u001b[1m\u001b[31mtest_rot13.py\u001b[0m:18: AssertionError\n    \u001b[31m\u001b[1m_________________ test_encode_spaces_error _________________\u001b[0m\n    \n        \u001b[94mdef\u001b[39;49;00m \u001b[92mtest_encode_spaces_error\u001b[39;49;00m():\n            \u001b[94mwith\u001b[39;49;00m pytest.raises(\u001b[96mValueError\u001b[39;49;00m):\n    >           encode(\u001b[33m\"\u001b[39;49;00m\u001b[33mSecret message for you\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m)\n    \u001b[1m\u001b[31mE           Failed: DID NOT RAISE <class 'ValueError'>\u001b[0m\n    \n    \u001b[1m\u001b[31mtest_rot13.py\u001b[0m:22: Failed\n    ================= short test summary info ==================\n    FAILED test_rot13.py::test_decode[frperg-secret] - Assert...\n    FAILED test_rot13.py::test_encode_spaces_error - Failed: ...\n    \u001b[31m=============== \u001b[31m\u001b[1m2 failed\u001b[0m, \u001b[32m3 passed\u001b[0m\u001b[31m in 0.10s\u001b[0m\u001b[31m ================\u001b[0m\n\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n:::\n\nThere are two failing tests:\n\n1. `test_rot13.py::test_decode[frperg-secret]` is failing due to a bug in the code. Find the bug in `rot13.py` and fix it so that the test passes.\n2. `test_rot13.py::test_encode_spaces_error` is failing due to a missing feature in our code. At the moment any spaces in the string are ignored. Change `encode` and `decode` in `rot13.py` so that they raise an error if any letter in the message is not found in the lookup string.\n  - Hint: You should add an `else` to the `if`/`elif` blocks\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_rot13_fix.qmd >}}\n:::\n\n::: {#exampleN .callout-note icon=false title='Exercise'}\n:::\n\n- Add a test to both `test_morse.py` and `test_rot13.py` which checks for \"round-tripping\". That is, check that a valid message which is passed to `encode` and then the output of that is passed to `decode` gets you back the original message.\n- What types of messages do not round-trip correctly in `morse`? What could you do to the test to make it pass?\n\n::: {#answerN .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ./answer_final_rot13_roundtrip.qmd >}}\n:::\n\n\n-->"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"shift-heading-level-by":1,"highlight-style":"github","output-file":"070-worksheet.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":["cosmo","../styles.scss"],"title":"Worksheet","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}