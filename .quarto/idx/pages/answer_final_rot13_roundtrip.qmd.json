{"title":"A lookup dictionary which, given a letter will return the morse code equivalent","markdown":{"headingText":"A lookup dictionary which, given a letter will return the morse code equivalent","containsRefs":false,"markdown":"```python\n\n_letter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', \n                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', \n                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',\n                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',\n                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',\n                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',\n                   ' ':'/'}\n\n# This will create a dictionary that can go from the morse back to the letter\n_morse_to_letter = {}\nfor letter in _letter_to_morse:\n    morse = _letter_to_morse[letter]\n    _morse_to_letter[morse] = letter\n\n\ndef encode(message):\n    \"\"\"\n    Encode a message from English to Morse Code\n    \n    Args:\n        message (str): the English message to encode\n    \n    Returns:\n        str: The encoded message\n    \n    Examples:\n        >>> encode(\"Help us\")\n        '.... . .-.. .--. / ..- ...'\n    \"\"\"\n    morse = []\n\n    for letter in message:\n        letter = letter.lower()\n        \n        if letter not in _letter_to_morse:\n            raise ValueError(f\"Cannot encode \\\"{message}\\\". Character \\\"{letter}\\\" not in Morse dictionary\")\n        \n        morse.append(_letter_to_morse[letter])\n\n    # We need to join together Morse code letters with spaces\n    morse_message = \" \".join(morse)\n    \n    return morse_message\n\n\ndef decode(message):\n    \"\"\"\n    Decode a message from Morse Code to English\n    \n    Args:\n        message (str): the Morse Code message to decode\n    \n    Returns:\n        str: The decoded English message\n    \n    Examples:\n        >>> decode(\".... . .-.. .--. / ..- ...\")\n        'help us'\n    \"\"\"\n    english = []\n\n    # Now we cannot read by letter. We know that morse letters are\n    # separated by a space, so we split the morse string by spaces\n    morse_letters = message.split(\" \")\n\n    for letter in morse_letters:\n        english.append(_morse_to_letter[letter])\n\n    # Rejoin, but now we don't need to add any spaces\n    english_message = \"\".join(english)\n    \n    return english_message\n```\n\n\n\n\n```python\n\nimport string\n\n_lower_cipher = string.ascii_lowercase[13:] + string.ascii_lowercase[:13]\n_upper_cipher = string.ascii_uppercase[13:] + string.ascii_uppercase[:13]\n\ndef encode(message):\n    \"\"\"\n    Encode a message from English to ROT13\n    \n    Args:\n        message (str): the English message to encode\n    \n    Returns:\n        str: The encoded message\n    \n    Examples:\n        >>> encode(\"Secretmessage\")\n        'Frpergzrffntr'\n    \"\"\"\n    output = []\n    for letter in message:\n        if letter in string.ascii_lowercase:\n            i = string.ascii_lowercase.find(letter)\n            output.append(_lower_cipher[i])\n        elif letter in string.ascii_uppercase:\n            i = string.ascii_uppercase.find(letter)\n            output.append(_upper_cipher[i])\n        else:  # Add this else statement\n            raise ValueError(f\"Cannot encode \\\"{message}\\\". Character \\\"{letter}\\\" not valid\")\n    \n    return \"\".join(output)\n\n\ndef decode(message):\n    \"\"\"\n    Encode a message from ROT13 to English\n    \n    Args:\n        message (str): the ROT13 message to encode\n    \n    Returns:\n        str: The decoded message\n    \n    Examples:\n        >>> encode(\"Frpergzrffntr\")\n        'Secretmessage'\n    \"\"\"\n    output = []\n    for letter in message:\n        if letter in _lower_cipher:\n            i = _lower_cipher.find(letter)\n            output.append(string.ascii_lowercase[i])  # ascii_uppercase â†’ ascii_lowercase\n        elif letter in _upper_cipher:\n            i = _upper_cipher.find(letter)\n            output.append(string.ascii_uppercase[i])\n        else:  # Add this else statement\n            raise ValueError(f\"Cannot decode \\\"{message}\\\". Character \\\"{letter}\\\" not valid\")\n    \n    return \"\".join(output)\n```\n\n\n\n```python\n\nimport pytest\n\nfrom morse import encode, decode\n\n@pytest.mark.parametrize(\"message\", [\n    \"sos\",\n    \"help us please\",\n    \"An Uppercase String\",\n])\ndef test_roundtrip(message):\n    assert decode(encode(message)) == message\n```\n\n\n\n\n```python\n\nimport pytest\n\nfrom rot13 import encode, decode\n\n@pytest.mark.parametrize(\"message\", [\n    \"sos\",\n    \"helpusplease\",\n    \"AnUppercaseString\",\n])\ndef test_roundtrip(message):\n    assert decode(encode(message)) == message\n```\n\n\n\n\n```python\npytest -v morse.py rot13.py test_morse.py test_rot13.py\n```\n\n    \u001b[1m=================== test session starts ====================\u001b[0m\n    platform linux -- Python 3.8.5, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3\n    cachedir: .pytest_cache\n    rootdir: /home/matt/projects/courses/software_engineering_best_practices\n    plugins: requests-mock-1.8.0\n    collected 6 items                                          \u001b[0m\n    \n    test_morse.py::test_roundtrip[sos] \u001b[32mPASSED\u001b[0m\u001b[32m            [ 16%]\u001b[0m\n    test_morse.py::test_roundtrip[help us please] \u001b[32mPASSED\u001b[0m\u001b[32m [ 33%]\u001b[0m\n    test_morse.py::test_roundtrip[An Uppercase String] \u001b[31mFAILED\u001b[0m\u001b[31m [ 50%]\u001b[0m\n    test_rot13.py::test_roundtrip[sos] \u001b[32mPASSED\u001b[0m\u001b[31m            [ 66%]\u001b[0m\n    test_rot13.py::test_roundtrip[helpusplease] \u001b[32mPASSED\u001b[0m\u001b[31m   [ 83%]\u001b[0m\n    test_rot13.py::test_roundtrip[AnUppercaseString] \u001b[32mPASSED\u001b[0m\u001b[31m [100%]\u001b[0m\n    \n    ========================= FAILURES =========================\n    \u001b[31m\u001b[1m___________ test_roundtrip[An Uppercase String] ____________\u001b[0m\n    \n    message = 'An Uppercase String'\n    \n        \u001b[37m@pytest\u001b[39;49;00m.mark.parametrize(\u001b[33m\"\u001b[39;49;00m\u001b[33mmessage\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m, [\n            \u001b[33m\"\u001b[39;49;00m\u001b[33msos\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m,\n            \u001b[33m\"\u001b[39;49;00m\u001b[33mhelp us please\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m,\n            \u001b[33m\"\u001b[39;49;00m\u001b[33mAn Uppercase String\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m,\n        ])\n        \u001b[94mdef\u001b[39;49;00m \u001b[92mtest_roundtrip\u001b[39;49;00m(message):\n    >       \u001b[94massert\u001b[39;49;00m decode(encode(message)) == message\n    \u001b[1m\u001b[31mE       AssertionError: assert 'an uppercase string' == 'An Uppercase String'\u001b[0m\n    \u001b[1m\u001b[31mE         - An Uppercase String\u001b[0m\n    \u001b[1m\u001b[31mE         ? ^  ^         ^\u001b[0m\n    \u001b[1m\u001b[31mE         + an uppercase string\u001b[0m\n    \u001b[1m\u001b[31mE         ? ^  ^         ^\u001b[0m\n    \n    \u001b[1m\u001b[31mtest_morse.py\u001b[0m:12: AssertionError\n    ================= short test summary info ==================\n    FAILED test_morse.py::test_roundtrip[An Uppercase String]\n    \u001b[31m=============== \u001b[31m\u001b[1m1 failed\u001b[0m, \u001b[32m5 passed\u001b[0m\u001b[31m in 0.10s\u001b[0m\u001b[31m ================\u001b[0m\n\n\nThe Morse Code converter does not maintain the case of the string. All messages passed into it will be converted to lower case. This means that a message like \"SOS\" will, after round-tripping be \"sos\". This means that in this case, the invariant of the round-trip is not that the messages are identical, but rather that they are \"identical if you ignore case\".\n\nTo make our test do this, we can compare the round-tripped message against the lower case message with `message.lower()`:\n\n\n```python\n\nimport pytest\n\nfrom morse import encode, decode\n\n@pytest.mark.parametrize(\"message\", [\n    \"sos\",\n    \"help us please\",\n    \"An Uppercase String\",\n])\ndef test_roundtrip(message):\n    assert decode(encode(message)) == message.lower()  # This line has changed\n```\n\n\n\n\n```python\npytest -v morse.py rot13.py test_morse.py test_rot13.py\n```\n\n    \u001b[1m=================== test session starts ====================\u001b[0m\n    platform linux -- Python 3.8.5, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3\n    cachedir: .pytest_cache\n    rootdir: /home/matt/projects/courses/software_engineering_best_practices\n    plugins: requests-mock-1.8.0\n    collected 6 items                                          \u001b[0m\n    \n    test_morse.py::test_roundtrip[sos] \u001b[32mPASSED\u001b[0m\u001b[32m            [ 16%]\u001b[0m\n    test_morse.py::test_roundtrip[help us please] \u001b[32mPASSED\u001b[0m\u001b[32m [ 33%]\u001b[0m\n    test_morse.py::test_roundtrip[An Uppercase String] \u001b[32mPASSED\u001b[0m\u001b[32m [ 50%]\u001b[0m\n    test_rot13.py::test_roundtrip[sos] \u001b[32mPASSED\u001b[0m\u001b[32m            [ 66%]\u001b[0m\n    test_rot13.py::test_roundtrip[helpusplease] \u001b[32mPASSED\u001b[0m\u001b[32m   [ 83%]\u001b[0m\n    test_rot13.py::test_roundtrip[AnUppercaseString] \u001b[32mPASSED\u001b[0m\u001b[32m [100%]\u001b[0m\n    \n    \u001b[32m==================== \u001b[32m\u001b[1m6 passed\u001b[0m\u001b[32m in 0.02s\u001b[0m\u001b[32m =====================\u001b[0m\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"shift-heading-level-by":1,"highlight-style":"github","output-file":"answer_final_rot13_roundtrip.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":["cosmo","../styles.scss"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}