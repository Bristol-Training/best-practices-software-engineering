```python

# A lookup dictionary which, given a letter will return the morse code equivalent
_letter_to_morse = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', 
                   'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..', 'm':'--', 
                   'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.', 's':'...', 't':'-',
                   'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..',
                   '0':'-----', '1':'.----', '2':'..---', '3':'...--', '4':'....-',
                   '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.',
                   ' ':'/'}

# This will create a dictionary that can go from the morse back to the letter
_morse_to_letter = {}
for letter in _letter_to_morse:
    morse = _letter_to_morse[letter]
    _morse_to_letter[morse] = letter


def encode(message):
    """
    Encode a message from English to Morse Code
    
    Args:
        message (str): the English message to encode
    
    Returns:
        str: The encoded message
    
    Examples:
        >>> encode("Help us")
        '.... . .-.. .--. / ..- ...'
    """
    morse = []

    for letter in message:
        letter = letter.lower()
        morse.append(_letter_to_morse[letter])

    # We need to join together Morse code letters with spaces
    morse_message = " ".join(morse)
    
    return morse_message


def decode(message):
    """
    Decode a message from Morse Code to English
    
    Args:
        message (str): the Morse Code message to decode
    
    Returns:
        str: The decoded English message
    
    Examples:
        >>> decode(".... . .-.. .--. / ..- ...")
        'help us'
    """
    english = []

    # Now we cannot read by letter. We know that morse letters are
    # separated by a space, so we split the morse string by spaces
    morse_letters = message.split(" ")

    for letter in morse_letters:
        english.append(_morse_to_letter[letter])

    # Rejoin, but now we don't need to add any spaces
    english_message = "".join(english)
    
    return english_message
```

    Overwriting morse.py



```python

import pytest

from morse import encode, decode

@pytest.mark.parametrize("message, output", [
    ("SOS", "... --- ..."),
    ("help", ".... . .-.. .--."),
    ("", ""),
    (" ", "/"),
])
def test_encode(message, output):
    assert encode(message) == output

@pytest.mark.parametrize("message, output", [
    ("... --- ...", "sos"),
    (".... . .-.. .--.", "help"),
    ("/", " "),
])
def test_decode(message, output):
    assert decode(message) == output
```

    Overwriting test_morse.py



```python
pytest -v --doctest-modules morse.py test_morse.py
```

    [1m=================== test session starts ====================[0m
    platform linux -- Python 3.8.5, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3
    cachedir: .pytest_cache
    rootdir: /home/matt/projects/courses/software_engineering_best_practices
    plugins: requests-mock-1.8.0
    collected 9 items                                          [0m
    
    morse.py::morse.decode [32mPASSED[0m[32m                        [ 11%][0m
    morse.py::morse.encode [32mPASSED[0m[32m                        [ 22%][0m
    test_morse.py::test_encode[SOS-... --- ...] [32mPASSED[0m[32m   [ 33%][0m
    test_morse.py::test_encode[help-.... . .-.. .--.] [32mPASSED[0m[32m [ 44%][0m
    test_morse.py::test_encode[-] [32mPASSED[0m[32m                 [ 55%][0m
    test_morse.py::test_encode[ -/] [32mPASSED[0m[32m               [ 66%][0m
    test_morse.py::test_decode[... --- ...-sos] [32mPASSED[0m[32m   [ 77%][0m
    test_morse.py::test_decode[.... . .-.. .--.-help] [32mPASSED[0m[32m [ 88%][0m
    test_morse.py::test_decode[/- ] [32mPASSED[0m[32m               [100%][0m
    
    [32m==================== [32m[1m9 passed[0m[32m in 0.04s[0m[32m =====================[0m

